""" YA CIERRA CON CTRL + C, SE LE APLICO AJUSTE AUTOMATICO DE LOS HIPERAMETROS Y EPOCAS TMABIEN SE LE MEJORO: ✅ Escalado corregido: Ahora scaler solo se ajusta una vez y se reutiliza.
✅ Regularización añadida: Dropout en las capas LSTM para reducir sobreajuste.
✅ Cambio de función de pérdida: Huber Loss para mayor estabilidad.
✅ Métrica mejorada: Se usa R² en lugar de una métrica arbitraria.
✅ CAMBIE EL ENFOQUE DE PREDICCION POR UNO QUE PREDICE SI EL MERCADO EN 5 SEGUNDOS SUBE O BAJA, PARECE QUE FUNCIONA, ARREGLARE UN POCO EL CODIGO
✅ YA LA IA SE ENTRENA Y PREDICE DESPUES DE ENTRENAR LAS PREDCCIONES LAS HACE BIEN PERO AUN LE FALTAN, Y SOLO DA SEÑALES DE COMPRA TOCA CONSTATAR SI TAMBIEN DA SEÑALES DE VENTA
✅ YA CORREGI LOS MENSAJES DE VERIFICACION DE LA PREDICCION, TOCA REGTIFICAR EN PROXIMAS ACTUALIZACIONES  SI LAS PREDICCIONES SON CORRECTAS MEDIANTE EL PRECIO INCIAL Y FINAL 
✅ YA CORREGI LA SALIDA DEL PRECIO DESPUES DE LOS 5 SEGUUNDOS, EL ERROR QUE HAY AHORA ES QUE LOS PRECIOS DE INCIO Y FINAL SON LOS MISMOS Y NO VARIAN
✅ EN LA FUNCION DE PREDICCION Y EN LA DE EVALUAR LE AÑADI LA LOGICA INTERNA DE OBTENER EL PRECIO DIRECTAMENTE DE MT5 , ES DECIR LA OBTENCIO DEL PRECIO DE MT5 NO ES EXTERNA SE HACE DENTRO DE LA FUNCION
✅ LE AGREGUE UNA MEJRO VERIFICACION A EVALUAR LA PREDICCION
✅ MEJORE LA LEJIVILIDAD DEL PRECIO DA EL PRECIO ANTES Y DESPUES CORRECTAMENTE PERO LA EVALUCION LA HACE MAL
✅ YA EVALUA CORRECTAMENTE LAS OPERACIONES, EL ERROR AHORA ES QUE GURARDA LAS PREDICCIONES EN EL ACRICHO TXT INCORRECTO
✅ YA LOS ARCHIVOS SE GUARDAN CORRECTAMENTE Y LOS BLOQUES ESTAN BIEN SEPARADOS
✅ OPERA EN PARALELO MULTIPLES SIMBOLOS, YA VERIFIQUE, PERO AUN NO HACE LAS PREDICCIONES TODAS AL MISMO TIEMPO, LE AGREGUE DIFERENCIACION DE CENTAVOS, DOLAR Y DOLARES CON LA DIFRENCIA
IA -16 """






".\mi_entorno_1\Scripts\Activate"

"numero de cuenta" "197115903"

"servidor" "Exness-MT5Trial11"

".\mi_entorno_1\Scripts\Activate"

" promt:  actua como un programador señor experto en IA y trading algoritmico"

import MetaTrader5 as mt5 
import logging
import time

import tensorflow as tf
from tensorflow import keras

import scipy as sp
import pandas as pd
import numpy as np
import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

from sklearn.model_selection import train_test_split, TimeSeriesSplit
from sklearn.metrics import accuracy_score, mean_absolute_error
from sklearn.preprocessing import MinMaxScaler

# Definir capas de Keras
Input = tf.keras.layers.Input
LSTM = tf.keras.layers.LSTM
Dense = tf.keras.layers.Dense
Attention = tf.keras.layers.Attention
Dropout = tf.keras.layers.Dropout

# Importar modelos y optimizadores desde tf.keras
Model = tf.keras.models.Model
Sequential = tf.keras.models.Sequential
Adam = tf.keras.optimizers.Adam
EarlyStopping = tf.keras.callbacks.EarlyStopping


import tensorflow as tf
import numpy as np
import pandas as pd
import MetaTrader5 as mt5
import pickle
import logging
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1))
import concurrent.futures









import pickle
import logging
import numpy as np
import pandas as pd
import MetaTrader5 as mt5
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score

# ⚡ Buffer para almacenar errores pasados
error_memoria = []

scaler = StandardScaler()

def cargar_modelo():
    """Carga el modelo desde un archivo o crea uno nuevo si no existe."""
    try:
        with open("modelo_entrenado.pkl", "rb") as f:
            modelo = pickle.load(f)
        logging.info("Modelo cargado correctamente.")
    except (FileNotFoundError, EOFError):
        logging.info("No se encontró un modelo entrenado. Creando uno nuevo...")
        modelo = crear_nuevo_modelo()
    return modelo

def crear_nuevo_modelo(units_1=64, units_2=32, dense_units=16, dropout_rate=0.2):
    """Crea un nuevo modelo con hiperparámetros ajustables y regularización."""
    modelo = tf.keras.Sequential([
        tf.keras.layers.LSTM(units_1, return_sequences=True, input_shape=(50, 1)),
        tf.keras.layers.Dropout(dropout_rate),
        tf.keras.layers.LSTM(units_2),
        tf.keras.layers.Dropout(dropout_rate),
        tf.keras.layers.Dense(dense_units, activation="relu"),
        tf.keras.layers.Dense(1)
    ])
    modelo.compile(optimizer="adam", loss=tf.keras.losses.Huber(delta=1.0), metrics=["mae"])
    return modelo

def obtener_datos_mt5(simbolo, timeframe, n_candles):
    """Obtiene los datos históricos desde MetaTrader 5."""
    rates = mt5.copy_rates_from_pos(simbolo, timeframe, 0, n_candles)
    if rates is None or len(rates) < n_candles:
        logging.warning(f"No se pudieron obtener suficientes datos para {simbolo}.")
        return None
    df = pd.DataFrame(rates)[['close']]
    
    if not hasattr(obtener_datos_mt5, "scaler_fitted"):
        scaler.fit(df[['close']])
        obtener_datos_mt5.scaler_fitted = True  # Evita reajustar en cada llamada
    
    df['close'] = scaler.transform(df[['close']])
    return df

def preparar_datos(df):
    """Prepara los datos para el entrenamiento del modelo."""
    X, y = [], []
    for i in range(len(df) - 50):
        X.append(df.iloc[i:i+50].values)
        y.append(df.iloc[i+50].values)
    return np.array(X), np.array(y)

def entrenar_modelo(modelo, X_train, y_train, X_test, y_test, epochs=10):
    """Entrena el modelo una sola vez y guarda si mejora la precisión."""
    
    modelo.fit(X_train, y_train, epochs=epochs, batch_size=32, verbose=1)
    
    precision = evaluar_modelo(modelo, X_test, y_test)
    logging.info(f"✅ Entrenamiento completado - Precisión: {precision:.4f}")

    # Guardar solo si mejora la precisión anterior
    if not hasattr(entrenar_modelo, "mejor_precision") or precision > entrenar_modelo.mejor_precision:
        entrenar_modelo.mejor_precision = precision
        guardar_modelo(modelo)
        logging.info("💾 Nuevo modelo guardado con mejor precisión.")

    return modelo


    return mejor_modelo if mejor_modelo else modelo

def evaluar_modelo(modelo, X_test, y_test):
    """Evalúa la precisión del modelo usando R² en lugar de MAE."""
    y_pred = modelo.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    return r2

def guardar_modelo(modelo):
    """Guarda el modelo entrenado en un archivo."""
    with open("modelo_entrenado.pkl", "wb") as f:
        pickle.dump(modelo, f)
    logging.info("💾 Modelo guardado correctamente.")

import time



import time
import logging
import MetaTrader5 as mt5
import numpy as np








import time
import MetaTrader5 as mt5

import MetaTrader5 as mt5
import time

import time
import MetaTrader5 as mt5

import time
import MetaTrader5 as mt5

import time
import MetaTrader5 as mt5

import time
import logging
import MetaTrader5 as mt5
import numpy as np

import time
import numpy as np
import MetaTrader5 as mt5
import logging

import concurrent.futures
import numpy as np
import MetaTrader5 as mt5
import time
import logging

import time
import logging
import numpy as np
import concurrent.futures
import MetaTrader5 as mt5

def evaluar_prediccion_binaria(prediccion, simbolos, modelo, dfs, scaler, precios_actuales=None, tp=0.0001):
    """
    Evalúa las predicciones de múltiples símbolos en paralelo.

    :param prediccion: Diccionario con las direcciones de predicción por símbolo (1 = subir, 0 = bajar).
    :param simbolos: Lista de símbolos en MT5.
    :param modelo: Modelo de ML para predicción.
    :param dfs: Diccionario con DataFrames de los datos recientes por símbolo.
    :param scaler: Scaler para transformar la predicción.
    :param precios_actuales: Diccionario con precios iniciales (opcional, se obtiene de MT5 si es None).
    :param tp: Take Profit en términos de diferencia de precio.
    :return: Diccionario con resultados por símbolo.
    """

    resultados = {}

    def procesar_simbolo(simbolo):
        precio_actual = precios_actuales.get(simbolo) if precios_actuales else None

        # Obtener el precio actual si no se proporciona
        if precio_actual is None or not isinstance(precio_actual, (int, float)) or precio_actual <= 0:
            tick_info = mt5.symbol_info_tick(simbolo)
            if tick_info and isinstance(tick_info.bid, (int, float)):
                precio_actual = float(tick_info.bid)
                print(f"✔ Precio inicial obtenido de MT5 ({simbolo}): {precio_actual:,.5f}")
            else:
                print(f"❌ Error: No se pudo obtener un precio inicial válido para {simbolo}.")
                return simbolo, None, None, None  

        # Obtener los últimos 50 datos para la predicción
        recent_data = dfs[simbolo][-50:].values.reshape(1, 50, -1)
        prediccion_simbolo = modelo.predict(recent_data)[0][0]

        # Convertir predicción al valor real
        if hasattr(scaler, "min_") and hasattr(scaler, "scale_"):
            prediccion_real = scaler.inverse_transform(np.array([[prediccion_simbolo]]))[0][0]
        else:
            logging.error(f"El scaler no ha sido ajustado antes de hacer inverse_transform en {simbolo}.")
            prediccion_real = prediccion_simbolo  

        # Determinar dirección de la predicción
        if prediccion_real > precio_actual + tp:
            direccion = "📈 SUBE"
            precio_objetivo = precio_actual + tp
        elif prediccion_real < precio_actual - tp:
            direccion = "📉 BAJA"
            precio_objetivo = precio_actual - tp
        else:
            direccion = "🟰 SIN CAMBIO"
            precio_objetivo = precio_actual  

        logging.info(f"{simbolo} - Precio actual: {precio_actual:,.5f}, Predicción: {direccion} (Objetivo TP: {precio_objetivo:,.5f})")

        # Esperar 5 segundos antes de obtener el precio final
        time.sleep(5)

        # Obtener el precio después de 5 segundos
        tick_info = mt5.symbol_info_tick(simbolo)
        if tick_info and isinstance(tick_info.bid, (int, float)):
            precio_final = float(tick_info.bid)
            print(f"✔ Precio después de 5 segundos ({simbolo}): {precio_final:,.5f}")
        else:
            print(f"⚠ Error: No se pudo obtener un precio final válido para {simbolo}.")
            return simbolo, precio_actual, direccion, None  


        # Comparativa de precios
        diferencia = precio_actual - precio_final  
        print("\n🔍 Comparativa de precios:")

        if diferencia == 0:
          print("   - No hay diferencia de precio.")
        elif abs(diferencia) < 1:
         diferencia *= 100  # Convertir a centavos
         print(f"   - Diferencia de: {diferencia:,.2f} centavos de dólar")
        elif abs(diferencia) == 1:
          print("   - Diferencia de: 1 dólar")
        else:
         print(f"   - Diferencia de: {abs(diferencia):,.5f} dólares")

        # Evaluar si alcanzó el TP correctamente
        if direccion == "📈 SUBE":
            if precio_final >= precio_actual + tp:
                print(f"✅ Predicción correcta: El precio SUBIÓ y alcanzó el Take Profit (TP) con precio de {precio_final:,.5f}.\n Precio inicial: {precio_actual:,.5f}, Precio final: {precio_final:,.5f}")
            elif precio_final <= precio_actual - tp:
                print(f"⚠️ Predicción opuesta: Se esperaba que SUBIERA, pero el precio BAJÓ.\n Precio inicial: {precio_actual:,.5f}, Precio final: {precio_final:,.5f}")
            else:
                print(f"❌ Predicción incorrecta: El precio NO SUBIÓ lo suficiente para alcanzar el TP.\n Precio inicial: {precio_actual:,.5f}, Precio final: {precio_final:,.5f}")

        elif direccion == "📉 BAJA":
            if precio_final <= precio_actual - tp:
                print(f"✅ Predicción correcta: El precio BAJÓ y alcanzó el Take Profit (TP) con precio de {precio_final:,.5f}.\n Precio inicial: {precio_actual:,.5f}, Precio final: {precio_final:,.5f}")
            elif precio_final >= precio_actual + tp:
                print(f"⚠️ Predicción opuesta: Se esperaba que BAJARA, pero el precio SUBIÓ.\n Precio inicial: {precio_actual:,.5f}, Precio final: {precio_final:,.5f}")
            else:
                print(f"❌ Predicción incorrecta: El precio NO BAJÓ lo suficiente para alcanzar el TP.\n Precio inicial: {precio_actual:,.5f}, Precio final: {precio_final:,.5f}")

        # Verificación final para evitar valores no numéricos
        if not isinstance(precio_actual, (int, float)) or not isinstance(precio_final, (int, float)):
            print(f"❌ Error: precio_actual ({precio_actual}) o precio_final ({precio_final}) no son números válidos.")
            return simbolo, precio_actual, direccion, None  

        return simbolo, precio_actual, direccion, precio_final  

    # Ejecutar en paralelo para todos los símbolos
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futuros = {executor.submit(procesar_simbolo, simbolo): simbolo for simbolo in simbolos}
        for futuro in concurrent.futures.as_completed(futuros):
            simbolo, precio_actual, direccion, precio_final = futuro.result()
            resultados[simbolo] = (precio_actual, direccion, precio_final)

    return resultados  











import re

from datetime import datetime

import time

from datetime import datetime

import locale
from datetime import datetime

# Configurar el formato numérico americano (si el sistema lo soporta)
locale.setlocale(locale.LC_NUMERIC, "en_US.UTF-8")

def formatear_precio(precio):
    return locale.format_string("%.6f", precio, grouping=True).replace(",", "X").replace(".", ",").replace("X", ".")

def guardar_prediccion(simbolo, direccion, precio_final, precio_actual):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    try:
        precio_actual = float(precio_actual)
        precio_futuro = float(precio_final)
    except ValueError:
        print(f"❌ Error: precio_inicio ({precio_actual}) o precio_futuro ({precio_futuro}) no son números válidos.")
        return  

    resultado = "INCORRECTA"
    if (direccion == "📈 SUBE" and precio_final >= precio_actual) or \
       (direccion == "📉 BAJA" and precio_final <= precio_actual):
        resultado = "CORRECTA"

    archivo = "correctas.txt" if resultado == "CORRECTA" else "incorrectas.txt"

    with open(archivo, "a", encoding="utf-8") as f:
        f.write(f"{timestamp} | {simbolo} | {direccion} | {resultado} | precio actual: {formatear_precio(precio_actual)} | presio final: {formatear_precio(precio_final)}\n")

    print(f"✅ Predicción guardada en {archivo}: {direccion} ({resultado})")




def buscar_por_fecha(archivo, fecha):
    with open(archivo, "r") as f:
        lineas = f.readlines()
    
    resultados = [linea for linea in lineas if fecha in linea]
    return resultados







import logging
import time
import pickle
import MetaTrader5 as mt5
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler

import logging
import MetaTrader5 as mt5
import pandas as pd
import time
from sklearn.preprocessing import MinMaxScaler
from datetime import datetime


import time
import logging
import MetaTrader5 as mt5
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler

import time
import logging
import MetaTrader5 as mt5
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

import logging
import MetaTrader5 as mt5
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from time import sleep

def main():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

    if not mt5.initialize():
        logging.error("❌ Error al inicializar MetaTrader 5.")
        exit()
    
    scaler = MinMaxScaler(feature_range=(0, 1))
    modelo = cargar_modelo()
    pares_divisas = ["BTCUSDm", "BTCZARm", "BTCCNHm"]

    logging.info("📊 Entrenando el modelo antes de predicciones en tiempo real...")
    datos_historicos = obtener_datos_mt5("BTCUSDm", mt5.TIMEFRAME_M1, 5000)

    if datos_historicos is not None and len(datos_historicos) > 50:
        X, y = preparar_datos(datos_historicos)
        split = int(len(X) * 0.8)
        modelo = entrenar_modelo(modelo, X[:split], y[:split], X[split:], y[split:])
        guardar_modelo(modelo)

    logging.info("✅ Modelo entrenado. Iniciando predicciones en tiempo real...")

    while True:
        for simbolo in pares_divisas:
            print("\n\n\n\n")  # Separación de 4 líneas después del bloque
            logging.info(f"🔍 Iniciando predicción para {simbolo}...")

            # Obtener los últimos 500 datos
            rates = mt5.copy_rates_from_pos(simbolo, mt5.TIMEFRAME_M1, 0, 500)
            if rates is None or len(rates) < 50:
                logging.warning(f"⚠️ No hay suficientes datos recientes para {simbolo}.")
                continue

            # Preparar DataFrame normalizado
            df = pd.DataFrame(rates)[['close']]
            df['close'] = scaler.fit_transform(df[['close']])  # Normalización

            # Hacer predicción con el modelo
            recent_data = df[-50:].values.reshape(1, 50, -1)
            prediccion = modelo.predict(recent_data)[0][0]

            # Evaluar la predicción
            resultados = evaluar_prediccion_binaria(
                prediccion={simbolo: prediccion},  # Se pasa en formato diccionario
                simbolos=[simbolo],  # Lista con un solo símbolo
                modelo=modelo, 
                dfs={simbolo: df},  # Diccionario con los DataFrames
                scaler=scaler,
                tp=0.0001
            )

            # Extraer los valores retornados para el símbolo específico
            precio_actual, direccion, precio_final = resultados.get(simbolo, (None, None, None))

            if precio_actual is None or direccion is None or precio_final is None:
                logging.warning(f"⚠️ No se pudo obtener una predicción válida para {simbolo}.")
                continue

            # Guardar la predicción
            guardar_prediccion(simbolo, direccion, precio_final, precio_actual)
            print("\n\n\n\n")  # Separación de 4 líneas después del bloque

            
        
        sleep(1)  # Pequeña pausa para evitar sobrecarga

if __name__ == "__main__":
    main() 
